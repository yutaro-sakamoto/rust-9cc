use std::str::FromStr;
use crate::ast::*;

grammar;
pub Program: Program = {
    <program_units:ProgramUnit*> => Program { program_units },
}

ProgramUnit: ProgramUnit = {
    "fn" <func_name: Identifier> "(" <parameters: Parameters?> ")" <block: BlockStatement> => {
        match parameters {
            Some(parameters) => ProgramUnit::FuncDef(func_name, parameters, Box::new(block)),
            None => ProgramUnit::FuncDef(func_name, vec![], Box::new(block)),
        }
    },
    <statement: Statement> => ProgramUnit::Statement(Box::new(statement)),
}

Parameters: Vec<String> = {
    <identifier: Identifier> <rest: RestParameter*> => {
        let mut ret = vec![identifier];
        ret.extend(rest);
        ret
    }
}

RestParameter: String = {
    "," <identifier: Identifier> => identifier,
}
        
Statement: Statement = {
    <AssignStatement> ";" => <>,
    <SingleExprStatement> ";" => <>,
    "return" <Expr> ";" => Statement::Return(Box::new(<>)),
    "if" "(" <condition: Expr> ")" <if_block: BlockStatement> <else_block: ElseBlock?> =>
        Statement::If(Box::new(condition), Box::new(if_block), Box::new(else_block)),
    <BlockStatement> => <>,
    "while" "(" <condition: Expr> ")" <block: BlockStatement> =>
        Statement::While(Box::new(condition), Box::new(block)),
    "for" "(" <init: ForInit?> ";" <condition: Expr?> ";" <step: ForStep?> ")" <block: BlockStatement> =>
        Statement::For(Box::new(init), Box::new(condition), Box::new(step), Box::new(block)),
    "break" ";" => Statement::Break,
}

AssignStatement: Statement = {
    <identifier: Identifier> "=" <expr: Expr> => Statement::Assign(identifier, Box::new(expr)),
}

SingleExprStatement: Statement = {
    <expr: Expr> => Statement::Expr(Box::new(expr)),
}

ForInit: Statement = {
    <AssignStatement> => <>,
    <SingleExprStatement> => <>,
}

ForStep: Statement = {
    <AssignStatement> => <>,
    <SingleExprStatement> => <>,
}

ElseBlock: Statement = {
    "else" <BlockStatement> => <>,
}

BlockStatement: Statement = {
    "{" <statements:Statement*> "}" => Statement::Block(statements),
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from_str(<>).unwrap(),
}

Expr: Expr = {
    <ArithExpr> => Expr::ArithExpr(Box::new(<>)),
    <left:ArithExpr> "==" <right:ArithExpr> => Expr::Equal(Box::new(left), Box::new(right)),
    <left:ArithExpr> "!=" <right:ArithExpr> => Expr::NotEqual(Box::new(left), Box::new(right)),
    <left:ArithExpr> "<" <right:ArithExpr> => Expr::Less(Box::new(left), Box::new(right)),
    <left:ArithExpr> "<=" <right:ArithExpr> => Expr::LessOrEqual(Box::new(left), Box::new(right)),
    <left:ArithExpr> ">" <right:ArithExpr> => Expr::Less(Box::new(right), Box::new(left)),
    <left:ArithExpr> ">=" <right:ArithExpr> => Expr::LessOrEqual(Box::new(right), Box::new(left)),
}

ArithExpr: ArithExpr = {
    <Factor> => ArithExpr::Factor(Box::new(<>)),
    <expr:ArithExpr> "+" <factor:Factor> => ArithExpr::Add(Box::new(expr), Box::new(factor)),
    <expr:ArithExpr> "-" <factor:Factor> => ArithExpr::Sub(Box::new(expr), Box::new(factor)),
}

Factor: Factor = {
    <Unary> => Factor::Unary(Box::new(<>)),
    <left:Factor> "*" <right:Unary> => Factor::Mul(Box::new(left), Box::new(right)),
    <left:Factor> "/" <right:Unary> => Factor::Div(Box::new(left), Box::new(right)),
}

Unary: Unary = {
    "-" <atom:Atom> => Unary::Neg(Box::new(atom)),
    "+" <atom:Atom> => Unary::Atom(Box::new(atom)),
    <atom:Atom> => Unary::Atom(Box::new(atom)),
}

Atom: Atom = {
    r"[0-9]+" => Atom::Number(i32::from_str(<>).unwrap()),
    "(" <expr:Expr> ")" => Atom::Expr(Box::new(expr)),
    <identifier:Identifier> <arguments:ArgumentList?> => {
        match arguments {
            Some(arguments) => Atom::FunctionCall(identifier, arguments),
            None => Atom::Variable(identifier),
        }
    }
}

ArgumentList: Vec<Expr> = {
    "(" ")" => vec![],
    "(" <arg:Expr> <rest_args: RestArgument*> ")" => {
        let mut ret = vec![arg];
        ret.extend(rest_args);
        ret
    }
}

RestArgument: Expr = {
    "," <arg:Expr> => arg,
}