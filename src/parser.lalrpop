use std::str::FromStr;
use crate::ast::*;

grammar;
pub Program: Program = {
    <statements:Statement*> => Program { statements: statements },
}
        
Statement: Statement = {
    <identifier: Identifier> "=" <expr: Expr> ";" => Statement::Assign(identifier, Box::new(expr)),
    <Expr> ";" => Statement::Expr(Box::new(<>)),
    "return" <Expr> ";" => Statement::Return(Box::new(<>)),
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from_str(<>).unwrap(),
}

Expr: Expr = {
    <ArithExpr> => Expr::ArithExpr(Box::new(<>)),
    <left:ArithExpr> "==" <right:ArithExpr> => Expr::Equal(Box::new(left), Box::new(right)),
    <left:ArithExpr> "!=" <right:ArithExpr> => Expr::NotEqual(Box::new(left), Box::new(right)),
    <left:ArithExpr> "<" <right:ArithExpr> => Expr::Less(Box::new(left), Box::new(right)),
    <left:ArithExpr> "<=" <right:ArithExpr> => Expr::LessOrEqual(Box::new(left), Box::new(right)),
    <left:ArithExpr> ">" <right:ArithExpr> => Expr::Less(Box::new(right), Box::new(left)),
    <left:ArithExpr> ">=" <right:ArithExpr> => Expr::LessOrEqual(Box::new(right), Box::new(left)),
}

ArithExpr: ArithExpr = {
    <Factor> => ArithExpr::Factor(Box::new(<>)),
    <expr:ArithExpr> "+" <factor:Factor> => ArithExpr::Add(Box::new(expr), Box::new(factor)),
    <expr:ArithExpr> "-" <factor:Factor> => ArithExpr::Sub(Box::new(expr), Box::new(factor)),
}

Factor: Factor = {
    <Unary> => Factor::Unary(Box::new(<>)),
    <left:Factor> "*" <right:Unary> => Factor::Mul(Box::new(left), Box::new(right)),
    <left:Factor> "/" <right:Unary> => Factor::Div(Box::new(left), Box::new(right)),
}

Unary: Unary = {
    "-" <atom:Atom> => Unary::Neg(Box::new(atom)),
    "+" <atom:Atom> => Unary::Atom(Box::new(atom)),
    <atom:Atom> => Unary::Atom(Box::new(atom)),
}

Atom: Atom = {
    r"[0-9]+" => Atom::Number(i32::from_str(<>).unwrap()),
    "(" <expr:Expr> ")" => Atom::Expr(Box::new(expr)),
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Atom::Variable(String::from_str(<>).unwrap()),
}